const uploadpdf = async (req, res) => {
    try {
        if (!db) {
            throw new Error('MongoDB connection not established.');
        }

        const { file, filename} = req.body;
        const id = req.query.id;
        //console.log(id)

        const uploadFile = async (data, name) => {
            const buffer = Buffer.from(data, 'base64');
            const bucket = new GridFSBucket(db);
            const uploadStream = bucket.openUploadStream(name);
            const fileId = uploadStream.id;

            await new Promise((resolve, reject) => {
                uploadStream.end(buffer, (error) => {
                    if (error) {
                        console.error(`Error uploading ${name}:`, error);
                        reject(error);
                    } else {
                      //  console.log(`${name} uploaded successfully, stored under id:`, fileId);
                        resolve(fileId);
                    }
                });
            });

            return fileId;
        };

        const fileId = file ? await uploadFile(file, filename) : null;
        if (fileId && id) {

            ///
            // Extract text from the PDF buffer directly
            const buffer = Buffer.from(file, 'base64');
            const pdfData = await pdfParse(buffer);
            const text = pdfData.text;

            // Send the extracted text to the Gemini API for prediction
            const apiKey = "AIzaSyA0PGILzV1yBsyoWb5DJyXltJ_m3AOrYGg";
            const genAI = new GoogleGenerativeAI(apiKey);
            const model = genAI.getGenerativeModel({
                model: "gemini-1.5-flash",
            });

            const generationConfig = {
                temperature: 0,
                topP: 0.95,
                topK: 64,
                maxOutputTokens: 1000,
                responseMimeType: "text/plain",
            };

            const chatSession = model.startChat({
                generationConfig,
                history: [
                    {
                        role: "user",
                        parts: [
                            { text: text },
                        ],
                    },
                ],
            });

            let result = await chatSession.sendMessage(text);
            let prediction = result.response.text();
            prediction = prediction.replace(/\*\*/g, ""); // Remove Markdown bold markers
            prediction = prediction.replace(/\*/g, "");
            ////
            await patient_data.findByIdAndUpdate(id, { fileId: fileId,prediction: prediction });
        }
       
      //  console.log("File saved successfully");
        res.json({ status: 'ok', fileId: fileId });
    } catch (error) {
        console.error('Error uploading file:', error);
        res.status(500).json({ error: 'Failed to save pdf details' });
    }
};